
4/30/97

The holy grail projection rewrite is now installed in cvs with the
new name hgproj.  The alias objects are gone, so this is no longer
aliaslib.  aliaslib still exists in cvs in case we want it again for
anything.  Most of the filenames are the same, but so much of the
code has been changed that there seemed little point to trying to
link this code with aliaslib (making it a cvs branch or something).

IAMR users will not want to link with this code yet because variable-
coefficient versions are not yet working.  All three constant-
coefficient versions do work---2d c5 and c9, 3d c7.  Results for
these are numerically identical to those for aliaslib.  Debug runs
on mothra have tended to be slightly faster with the new code, since
some of the aliaslib overhead is eliminated.  I have not done
performance tests yet for optimized code.

Level solves, multilevel solves, and graphics are all working.  Since
the graphics routines now plot from MultiFabs they may be easier to
call from other programs such as IAMR.  This would not replace the
existing IAMR graphics capability, but might be useful for generating
plots from inside the code for debugging.

The line solve capability recently added to aliaslib is not included
in this library.  Instead, I want to see if I can do line solves
"right", i.e., whole columns at a time.  If the grid-based line
solves turn out to be better for some applications, though, they
can be added without too much trouble.

Current action items are getting variable coefficients working,
writing in IntVect refinement ratios, and working on the more general
line solves.  (Variable coefficients are tricky because the code for
generating coarsened coefficients for multigrid relied on the
alias capability in nontrivial ways.)

Here's a summary of the changes so far:

1. The alias classes replaced are
  level_mesh => BoxArray
  amr_mesh   => Array<BoxArray>
  grid_real  => Fab
  level_real => MultiFab
  amr_real   => PArray<MultiFab>
Most of the changes involved translating function calls into a new
syntax, but in some cases more extensive rewriting was necessary.
The loss of the alias capability made some operations more complicated
and prone to errors.  On the other hand, the bounds checking built in
to Array and PArray has been very useful in debugging the new version.

2. The old classes had some information that the new ones do not, so
some additional members have been added to amr_multigrid and its
derived classes to store that information.  For example, level_mesh
knows what the problem domain is but BoxArray does not, so now a
separate Array of problem domains is provided.

3. Some former aliaslib classes have been retained in the new
library.  These include the boundary, interface, cache, restrictor
and interpolator classes.  Some of this material may eventually be
replaced by BoxLib equivalents, but for most of it equivalents do
not exist.

4. The fill_patch functions from aliaslib have been retained, since
the Amr equivalents are not accessible.  The fill_borders and
sync_borders functions are also retained.  fill_borders may be
replaceable by its MultiFab equivalent, but I have not tried to
do so yet.  There are questions of efficiency, whether the MultiFab
versions correctly support node-based data, and interactions with
the physical boundary conditions that would have to be addressed.

5. The DLList-style lists are gone, replaced by List<T>.

6. Some uses of bare C-style arrays have been replaced with Array
or PArray, but some others have not.

7. The DECLARE_ERROR_FUNC macros for defining error handlers are gone.
The error calls they handled have been replaced by assertions or
calls to BoxLib::Error().

8. The macros BL_SPACEDIM and BL_FORT_USE_UNDERSCORE are now used in
the standard way.

9. The two libraries are combined into one.  The few files left that
went into libalias are now installed into libproj.
